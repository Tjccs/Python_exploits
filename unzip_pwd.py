import zipfile
import sys
import argparse
import itertools
import string
from threading import Thread


def extracZip(zfile, dictionary):
    with open(dictionary, 'r') as f:
        for password in f:
            password = password.rstrip().encode('utf-8')
            try:
                zipfile.ZipFile(zfile).extractall(pwd=password)
                print('[+] Password = ' + password + '\n')
            except RuntimeError:
                pass

    return False


def bruteforce(nbcharmax, zipf):
    """If the password hasn't been found yet, the function switches to bruteforce"""

    alphabet = string.ascii_letters + string.digits + string.punctuation

    for pass_len in range(1, nbcharmax):
        for j in itertools.product(alphabet, repeat=pass_len):
            password = ''.join(j).encode('utf-8')
            try:
                zipfile.ZipFile(zipf).extractall(pwd=password)
                print('Password found')
                return True
            except RuntimeError:
                pass
    return False


def main():
    parser = argparse.ArgumentParser(
        prog='unzip_pwd', description='Zipfile cracker')
    parser.add_argument('-f', dest='zname')
    parser.add_argument('-d', dest='dname')
    args = parser.parse_args()

    extracZip(args.zname, args.dname)
    # if not extracZip(args.zname, args.dname):
    #       print('[+] Dictionary attack didn\'t work, using bruteforce')
    #        bruteforce(4, args.zname)


if __name__ == '__main__':
    main()

